# https://github.com/docker-library
# https://docs.docker.com/reference/compose-file/
services:
  jenkins:
    image: jenkins/jenkins:lts-jdk21
    container_name: jenkins
    restart: always
    privileged: true
    user: root
    ports:
    - 8080:8080
    - 50000:50000
    environment:
      TZ: Asia/Shanghai
    volumes:
    - /root/.m2:/root/.m2
    - /usr/bin/docker:/usr/bin/docker
    - /usr/libexec/docker:/usr/libexec/docker
    - /var/run/docker.sock:/var/run/docker.sock
    - /etc/docker/daemon.json:/etc/docker/daemon.json
    - /var/jenkins_home:/var/jenkins_home
  redis:
    image: redis
    container_name: jedis
    restart: always
    ports:
    - 6379:6379
    healthcheck:
      test:
      - CMD
      - redis-cli
      - ping
      interval: 5s
      timeout: 5s
      retries: 12
    environment:
      TZ: Asia/Shanghai
    volumes:
    - /root/MicroServer/repo/docker/volumes/redis/redis.conf:/etc/redis/redis.conf
  rabbitmq:
    image: rabbitmq:management
    container_name: rabbitmq
    restart: always
    ports:
    - 5672:5672
    - 15672:15672
    healthcheck:
      test:
      - CMD
      - rabbitmqctl
      - status
      interval: 5s
      timeout: 5s
      retries: 12
    environment:
      TZ: Asia/Shanghai
      RABBITMQ_DEFAULT_VHOST: /dev
      RABBITMQ_DEFAULT_USER: dev
      RABBITMQ_DEFAULT_PASS: ${DB_PASSWORD}
  postgres:
    image: postgres
    container_name: postgres
    restart: always
    ports:
    - 5432:5432
    healthcheck:
      test:
      - CMD-SHELL
      - pg_isready -U postgres
      interval: 5s
      timeout: 5s
      retries: 12
    environment:
      TZ: Asia/Shanghai
      POSTGRES_DB: postgres
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: ${DB_PASSWORD}
    volumes:
    - /root/MicroServer/repo/docker/volumes/postgres/init-user-db.sh:/docker-entrypoint-initdb.d/init-user-db.sh
  mysql:
    image: mysql
    container_name: mysql
    restart: always
    ports:
    - 3306:3306
    command: --character-set-server=utf8mb4 --collation-server=utf8mb4_unicode_ci --skip-log-bin
    healthcheck:
      test:
      - CMD
      - mysqladmin
      - ping
      - -u
      - root
      - -p${DB_PASSWORD}
      interval: 5s
      timeout: 5s
      retries: 12
    environment:
      TZ: Asia/Shanghai
      MYSQL_DATABASE: dev
      MYSQL_USER: dev
      MYSQL_PASSWORD: ${DB_PASSWORD}
      MYSQL_ROOT_PASSWORD: ${DB_PASSWORD}
    volumes:
    - /root/MicroServer/repo/docker/volumes/mysql/init-user-db.sql:/docker-entrypoint-initdb.d/init-user-db.sql
  clickhouse:
    image: clickhouse/clickhouse-server
    container_name: clickhouse
    restart: always
    ports:
    - 8123:8123
    - 9000:9000
    healthcheck:
      test:
      - CMD
      - wget
      - --spider
      - -q
      - http://localhost:8123
      interval: 5s
      timeout: 5s
      retries: 12
    environment:
      TZ: Asia/Shanghai
      CLICKHOUSE_DB: dev
      CLICKHOUSE_USER: dev
      CLICKHOUSE_DEFAULT_ACCESS_MANAGEMENT: 1
      CLICKHOUSE_PASSWORD: ${DB_PASSWORD}
    volumes:
    - /root/MicroServer/repo/docker/volumes/clickhouse/init-db.sh:/docker-entrypoint-initdb.d/init-db.sh
  grafana:
    image: grafana/grafana-oss
    container_name: grafana
    restart: always
    depends_on:
      clickhouse:
        condition: service_healthy
    ports:
    - 3000:3000
    environment:
      TZ: Asia/Shanghai
      GF_INSTALL_PLUGINS: grafana-clickhouse-datasource
      GF_AUTH_ANONYMOUS_ENABLED: 0
      GF_DATABASE_TYPE: postgres
      GF_DATABASE_HOST: postgres:5432
      GF_DATABASE_NAME: grafana
      GF_DATABASE_USER: grafana
      GF_DATABASE_PASSWORD: ${DB_PASSWORD}
      GF_DATABASE_SSL_MODE: disable
  config-server:
    image: registry.cn-hangzhou.aliyuncs.com/rlm/config-server:0.0.1
    container_name: config-server
    hostname: config-server
    restart: always
    init: true
    depends_on:
      redis:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy
      postgres:
        condition: service_healthy
    ports:
    - 7001:7001
    - 9001:9001
    healthcheck:
      test:
      - CMD
      - curl
      - -f
      - http://localhost:9001/actuator/health
      interval: 5s
      timeout: 5s
      retries: 12
    environment:
      SERVER_PORT: 7001
      MANAGEMENT_SERVER_PORT: 9001
      SECURITY_USER_NAME: ${SECURITY_USER_NAME}
      SECURITY_USER_PASSWORD: ${SECURITY_USER_PASSWORD}
      GIT_PASSPHRASE: ${GIT_PASSPHRASE}
  eureka-server1:
    image: registry.cn-hangzhou.aliyuncs.com/rlm/eureka-server:0.0.1
    container_name: eureka-server1
    hostname: eureka-server1
    restart: always
    init: true
    depends_on:
      config-server:
        condition: service_healthy
    ports:
    - 7101:7101
    - 9101:9101
    healthcheck:
      test:
      - CMD
      - curl
      - -f
      - http://localhost:9101/actuator/health
      interval: 5s
      timeout: 5s
      retries: 36
    environment:
      HOSTNAME: eureka-server1
      SERVER_PORT: 7101
      MANAGEMENT_SERVER_PORT: 9101
      SECURITY_USER_NAME: ${SECURITY_USER_NAME}
      SECURITY_USER_PASSWORD: ${SECURITY_USER_PASSWORD}
      CONFIGSERVER: http://config-server:7001/config
      EUREKA_SERVER: http://eureka-server1:7101/registrar/eureka,http://eureka-server2:7102/registrar/eureka,http://eureka-server3:7103/registrar/eureka
      EUREKA_AUTH_SECRETKEY: ${EUREKA_AUTH_SECRETKEY}
  eureka-server2:
    image: registry.cn-hangzhou.aliyuncs.com/rlm/eureka-server:0.0.1
    container_name: eureka-server2
    hostname: eureka-server2
    restart: always
    init: true
    depends_on:
      config-server:
        condition: service_healthy
    ports:
    - 7102:7102
    - 9102:9102
    healthcheck:
      test:
      - CMD
      - curl
      - -f
      - http://localhost:9102/actuator/health
      interval: 5s
      timeout: 5s
      retries: 36
    environment:
      HOSTNAME: eureka-server2
      SERVER_PORT: 7102
      MANAGEMENT_SERVER_PORT: 9102
      SECURITY_USER_NAME: ${SECURITY_USER_NAME}
      SECURITY_USER_PASSWORD: ${SECURITY_USER_PASSWORD}
      CONFIGSERVER: http://config-server:7001/config
      EUREKA_SERVER: http://eureka-server1:7101/registrar/eureka,http://eureka-server2:7102/registrar/eureka,http://eureka-server3:7103/registrar/eureka
      EUREKA_AUTH_SECRETKEY: ${EUREKA_AUTH_SECRETKEY}
  eureka-server3:
    image: registry.cn-hangzhou.aliyuncs.com/rlm/eureka-server:0.0.1
    container_name: eureka-server3
    hostname: eureka-server3
    restart: always
    init: true
    depends_on:
      config-server:
        condition: service_healthy
    ports:
    - 7103:7103
    - 9103:9103
    healthcheck:
      test:
      - CMD
      - curl
      - -f
      - http://localhost:9103/actuator/health
      interval: 5s
      timeout: 5s
      retries: 36
    environment:
      HOSTNAME: eureka-server3
      SERVER_PORT: 7103
      MANAGEMENT_SERVER_PORT: 9103
      SECURITY_USER_NAME: ${SECURITY_USER_NAME}
      SECURITY_USER_PASSWORD: ${SECURITY_USER_PASSWORD}
      CONFIGSERVER: http://config-server:7001/config
      EUREKA_SERVER: http://eureka-server1:7101/registrar/eureka,http://eureka-server2:7102/registrar/eureka,http://eureka-server3:7103/registrar/eureka
      EUREKA_AUTH_SECRETKEY: ${EUREKA_AUTH_SECRETKEY}
  gateway-server:
    image: registry.cn-hangzhou.aliyuncs.com/rlm/gateway-server:0.0.1
    container_name: gateway-server
    hostname: gateway-server
    restart: always
    init: true
    depends_on:
      config-server:
        condition: service_healthy
    ports:
    - 7002:7002
    - 9002:9002
    healthcheck:
      test:
      - CMD
      - curl
      - -f
      - http://localhost:9002/actuator/health
      interval: 5s
      timeout: 5s
      retries: 36
    environment:
      SERVER_PORT: 7002
      MANAGEMENT_SERVER_PORT: 9002
      SECURITY_USER_NAME: ${SECURITY_USER_NAME}
      SECURITY_USER_PASSWORD: ${SECURITY_USER_PASSWORD}
      CONFIGSERVER: http://config-server:7001/config
      EUREKA_SERVER: http://eureka-server1:7101/registrar/eureka,http://eureka-server2:7102/registrar/eureka,http://eureka-server3:7103/registrar/eureka
      EUREKA_AUTH_SECRETKEY: ${EUREKA_AUTH_SECRETKEY}
  mygraph:
    image: registry.cn-hangzhou.aliyuncs.com/rlm/mygraph:1.0.1
    container_name: mygraph
    hostname: mygraph
    restart: always
    init: true
    depends_on:
      redis:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy
      mysql:
        condition: service_healthy
    ports:
    - 7080:7080
    - 7090:7090
    healthcheck:
      test:
      - CMD
      - curl
      - -f
      - http://localhost:7090/actuator/health
      interval: 5s
      timeout: 5s
      retries: 36
    environment:
      TZ: Asia/Shanghai
      SERVER_PORT: 7080
      MANAGEMENT_SERVER_PORT: 7090
      DB_INIT_MODE: ALWAYS
      SECURITY_USER_NAME: ${SECURITY_USER_NAME}
      SECURITY_USER_PASSWORD: ${SECURITY_USER_PASSWORD}
      CONFIGSERVER: http://config-server:7001/config
networks:
  default:
    external: true
    name: share